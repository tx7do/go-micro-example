// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: admin/service/v1/i_user.proto

package servicev1

import (
	fmt "fmt"
	_ "github.com/google/gnostic/openapiv3"
	v1 "go-micro-example/api/gen/go/user/service/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	// 获取用户数据
	GetUser(ctx context.Context, in *v1.GetUserRequest, opts ...client.CallOption) (*v1.User, error)
	// 创建用户
	CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// 更新用户
	UpdateUser(ctx context.Context, in *v1.UpdateUserRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *v1.DeleteUserRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetUser(ctx context.Context, in *v1.GetUserRequest, opts ...client.CallOption) (*v1.User, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser", in)
	out := new(v1.User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *v1.UpdateUserRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *v1.DeleteUserRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	// 获取用户数据
	GetUser(context.Context, *v1.GetUserRequest, *v1.User) error
	// 创建用户
	CreateUser(context.Context, *v1.CreateUserRequest, *emptypb.Empty) error
	// 更新用户
	UpdateUser(context.Context, *v1.UpdateUserRequest, *emptypb.Empty) error
	// 删除用户
	DeleteUser(context.Context, *v1.DeleteUserRequest, *emptypb.Empty) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		GetUser(ctx context.Context, in *v1.GetUserRequest, out *v1.User) error
		CreateUser(ctx context.Context, in *v1.CreateUserRequest, out *emptypb.Empty) error
		UpdateUser(ctx context.Context, in *v1.UpdateUserRequest, out *emptypb.Empty) error
		DeleteUser(ctx context.Context, in *v1.DeleteUserRequest, out *emptypb.Empty) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) GetUser(ctx context.Context, in *v1.GetUserRequest, out *v1.User) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *v1.CreateUserRequest, out *emptypb.Empty) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *v1.UpdateUserRequest, out *emptypb.Empty) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *v1.DeleteUserRequest, out *emptypb.Empty) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}
